#!/bin/sh
# vi: set ft=sh et sw=4 ts=4:
set -e # the code relies on this, so remove with care
set -u
trap 'echo Caught SIGINT >&2 ; exit 1 ;' INT
trap 'echo Caught SIGTERM >&2 ; exit 1 ;' TERM

verbose=${verbose:-1}
help=${help:-}
force=${force:-}

error() { echo "error: $@" >&2 ; }
warn() { echo "warn: $@" >&2 ; }
die() { error "$@" ; exit 1 ; }
verbose() { test "$1" -gt "$verbose" || { shift ; echo "$@" ; } ; }
# Try to use -- to escape _only the first_ arg, but only if necessary.
# Only useful for user-provided args.
x_() {
    local x="$1" ; shift
    if test "${1#-}" != "$1" ; then "$x" -- "$@" ; else "$x" "$@" ; fi
}
prog="$(x_ basename "$0")"
usage() { echo "usage: $prog [<git-svn-repo>]" ; }

call() { echo "(cd $(pwd) ; $@)" ; "$@" ; }

do_clone() {
    test -d .git_externals || return 1
    local rev="$1"
    local url="$2"
    local co="$3"
    local module="$(echo $url | sed -e 's,\(.*\)\(/trunk\|/branch.*\|/tag.*\),\1,')"
    local branch="$(echo $url | sed -e 's,\(.*\)\(/trunk\|/branch.*\|/tag.*\),\2,' -e 's,^/,,')"
    if test "$branch" = "$url" ; then
        branch=""
    fi
     (
        if test -d ".git_externals/$co" ; then
            (
                cd ".git_externals/$co"
                call git svn fetch --all
            )
        else
            tags="tags"
            brch="branches"
            branchpath="$(echo $branch | cut -f1 -d/)"
            echo $tags | grep -- "$branchpath" >/dev/null 2>&1 && tags="$branchpath"
            echo $brch | grep -- "$branchpath" >/dev/null 2>&1 && brch="$branchpath"

            if test "$module" = "$url" ; then
                # URL does not contains any trunk, branches or tags part, so we dont need
                # additional options for git-svn
                (cd .git_externals ; call git svn clone $rev "$module" "$co")
            else
                (cd .git_externals ; call git svn clone $rev "$module" -T trunk -b "$brch" -t "$tags" "$co")
            fi

        fi
        (
            branch="$(echo $branch | sed -e 's,/$,,')"
            if test -n "$branch" ; then
                cd ".git_externals/$co"
                if test -z "$force" ; then
                    warn "The following command might trash your checkout if there are bugs, so I won't run them for you."
                    echo "(cd $(pwd) ; git reset --hard "$branch")"
                else
                    call git reset --hard "$branch"
                fi
            fi
        )
    )
}

do_link() {
    local dir="$1"
    local base="$(x_ dirname "$dir")"
    (
        mkdir -p -- "$base" >/dev/null 2>&1 || true
        x_ cd "$base"
        ln -sf "$(git rev-parse --show-cdup).git_externals/$dir"
    )
}

do_excludes() {
    local dir="$1"
    git_excludes_path=.git/info/exclude
    if ! grep -q '^\.git_externals$' "$git_excludes_path" ; then
        echo .git_externals >> "$git_excludes_path"
    fi

    if ! grep -q "^$dir\$" "$git_excludes_path" ; then
        echo "$dir" >> "$git_excludes_path"
    fi
}

is_excluded() {
    if test -f .git_externals_exclude ; then
        if test -n "$(grep -v "^#" .git_externals_exclude | grep "^/$1$")" ; then
            return 0
        fi
    fi
    return 1
}

is_rev() { echo "$1" | grep -q '^-r[0-9][0-9]*$' ; }
is_url() {
    case "$1" in
    *://*) return 0 ;;
    esac
    return 1
}
categorise() {
    if test -z "$1" ; then return 0
    elif is_rev "$1" ; then echo "rev"
    elif is_url "$1" ; then echo "url"
    else echo "dir" ; fi
}

main() {
    while test $# -gt 0 ; do
        case "$1" in
        -h|--help|-\?) usage ; exit ;;
        --) shift ; break ;;
        *) break ;;
        esac
        shift
    done
    if test -n "$help" ; then
        usage
        exit
    fi
    if test $# -gt 1 ; then
        usage >&2
        exit 1
    fi
    if test $# -eq 1 ; then
        x_ cd "$1"
        shift
    fi
    local tld="$(git rev-parse --show-cdup)"
    test -n "$tld" && cd "$tld"
    mkdir .git_externals 2>/dev/null || true
    local exts
    exts="$(git svn show-externals)" || die "$(pwd) doesn't appear to be a git-svn repository."
    echo "$exts" \
      | grep -vE '#|^$' \
      | sed -e 's/\(-r\)[ ]*\([0-9]\{1,\}\)/\1\2/' \
      | while read rev_co rev_url url_co extra ; do
        test -n "$rev_co" || continue

        local rev=
        local url=
        local co=

        case "$(categorise "$rev_co")" in
        rev) rev="$rev_co" ;;
        dir) co="$rev_co" ;;
        *)
            error "$rev_co was expected to be a revision or directory"
            continue
            ;;
        esac

        case "$(categorise "$rev_url")" in
        rev) rev="$rev_url" ;;
        url) url="$rev_url" ;;
        *)
            error "$rev_url was expected to be a revision or remote URL"
            continue
            ;;
        esac

        case "$(categorise "$url_co")" in
        url) url="$url_co" ;;
        dir) co="$url_co" ;;
        *) ;;
        esac

        if test -n "$extra" ; then
            warn "Unknown extra data from 'git svn show-externals': $extra"
        fi

        local line="$rev_co $rev_url $url_co $extra"
        if test -z "$url" ; then
            die "URL field is empty: $line"
        fi
        if test -z "$co" ; then
            die "Directory field is empty: $line"
        fi
        unset url_co rev_url rev_co extra
        if echo "$co" | grep -q '^/' ; then
            co=".$co"
        fi

        if ! is_excluded "$co" ; then
            if test -n "${USE_SSH:-}" ; then
                verbose 1 "Rewriting URL to use svn+ssh"
                url="$(perl -we 'ARGV[1]=~s,^(http|https)://,svn+ssh://,;print "$ARGV[1]\n";' "$url")"
            fi

            verbose 1 "$co -> $url"
            local baseco="$(x_ dirname "$co")"
            if ! test -d ".git_externals/$baseco" ; then
                verbose 1 "Creating .git_externals"
                mkdir ".git_externals/$baseco"
            fi

            do_clone "$rev" "$url" "$co" || exit
            do_link "$co"
            do_excludes "$co"
        fi
    done
}
main "$@"
